{"version":3,"sources":["components/Checkable.tsx","components/Product.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Checkable","props","useState","isChecked","setChecked","Checkbox","checked","onChange","event","target","onCheck","children","convertFromRaw","raw","lowOnStock","available","quantity","Product","product","className","src","imageUrl","alt","productId","promotionBadge","name","price","priceWas","App","products","setProducts","selectedProducts","setSelectedProducts","deletedProducts","setDeletedProducts","useEffect","fetch","then","data","json","map","Button","variant","color","onClick","concat","length","filter","indexOf","isSelected","selectedId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAoBeA,EAjBG,SAACC,GAEjB,MAAgCC,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KAOA,OACE,gCACE,cAACC,EAAA,EAAD,CAAUC,QAASH,EAAWI,SAPd,SAACC,GACnBJ,EAAWI,EAAMC,OAAOH,SACxBL,EAAMS,QAAQF,EAAMC,OAAOH,YAMxBL,EAAMU,aCaN,SAASC,EAAeC,GAM3B,OALY,2BACLA,GADK,IAERC,WAA+B,SAAnBD,EAAIC,WAChBC,UAA6B,SAAlBF,EAAIE,WAAwBF,EAAIG,SAAW,IAK9D,IA0BeC,EAxBC,SAACC,GACb,OACI,0BAASC,UAAU,UAAnB,UACI,qBAAKA,UAAU,gBACXC,IAAG,UAAKF,EAAQG,UAChBC,IAAG,mBAAcJ,EAAQK,aAC7B,qBAAKJ,UAAU,yBAAf,SAAyCD,EAAQM,iBACjD,qBAAKL,UAAU,eAAf,SAA+BD,EAAQO,OACvC,sBAAMN,UAAU,gBAAhB,mBAVQ,OAUR,YAAsDD,EAAQQ,SAC9D,sBAAMP,UAAU,mBAAhB,mBAXQ,OAWR,YAAyDD,EAAQS,YAE5DT,EAAQH,UAEL,qCACI,sBAAKI,UAAU,mBAAf,UAAmCD,EAAQF,SAA3C,eAEIE,EAAQJ,YAAc,qBAAKK,UAAU,mBAAf,6BAJ9B,qBAAKA,UAAU,uBAAf,8BCQLS,MAlDf,WAEE,MAAgC1B,mBAAS,IAAzC,mBAAO2B,EAAP,KAAiBC,EAAjB,KACA,EAAgD5B,mBAAS,IAAzD,mBAAO6B,EAAP,KAAyBC,EAAzB,KACA,EAA8C9B,mBAAS,IAAvD,mBAAO+B,EAAP,KAAwBC,EAAxB,KA4BA,OA1BAC,qBAAU,WACRC,MATa,gEAUVC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAC,GAAI,OAAIA,EAAKE,IAAI5B,MACtByB,KAAKP,KACP,IAsBD,qCACE,cAACW,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QArBhD,WACEV,EAAmBD,EAAgBY,OAAOd,KAoBxC,sCAEEE,EAAgBa,OAAS,GAAK,cAACL,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QATlF,WACEV,EAAmB,IACnBF,EAAoB,KAOc,+BAGhC,qBAAKb,UAAU,MAAf,SACGU,EAASkB,QAAO,SAAA7B,GAAO,OAAoD,IAAhDe,EAAgBe,QAAQ9B,EAAQK,cAAmBiB,KAAI,SAAAtB,GAAO,OACxF,cAAC,EAAD,CAAmCR,SAxBpBa,EAwB2CL,EAAQK,UAvBjE,SAAC0B,GACFA,IAAuD,IAAzClB,EAAiBiB,QAAQzB,GACzCS,EAAoBD,EAAiBc,OAAOtB,IAClC0B,GACVjB,EAAoBD,EAAiBgB,QAAO,SAAAG,GAAU,OAAIA,GAAc3B,QAmBtE,SACE,cAAC,EAAD,eAAaL,KADCA,EAAQK,WAxBhC,IAAuBA,WCZV4B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f2e39392.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst Checkable = (props: { children: any, onCheck: Function }) => {\r\n\r\n  const [isChecked, setChecked] = useState(false);\r\n\r\n  const toggleCheck = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setChecked(event.target.checked);\r\n    props.onCheck(event.target.checked);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Checkbox checked={isChecked} onChange={toggleCheck} />\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Checkable\r\n","export interface ProductDetails {\r\n    productId: number;\r\n    name: string;\r\n    description: string;\r\n    price: number;\r\n    priceWas: number;\r\n    available: boolean;\r\n    quantity: number;\r\n    lowOnStock: boolean;\r\n    promotionBadge: string;\r\n    imageUrl: string;\r\n}\r\n\r\ntype StringyBool = \"TRUE\" | \"FALSE\"\r\n\r\nexport interface ProductDetailsRaw {\r\n    productId: number;\r\n    name: string;\r\n    description: string;\r\n    price: number;\r\n    priceWas: number;\r\n    available: StringyBool;\r\n    quantity: number;\r\n    lowOnStock: StringyBool;\r\n    promotionBadge: string;\r\n    imageUrl: string;\r\n}\r\n\r\nexport function convertFromRaw(raw : ProductDetailsRaw): ProductDetails {\r\n    const result = {\r\n        ...raw, \r\n        lowOnStock: raw.lowOnStock === \"TRUE\", \r\n        available: raw.available === \"TRUE\" && raw.quantity > 0\r\n    }\r\n    return result;\r\n}\r\n\r\nconst currencySymbol = `Â£`;\r\n\r\nconst Product = (product: ProductDetails) => {\r\n    return (\r\n        <section className=\"product\">\r\n            <img className=\"product-image\"\r\n                src={`${product.imageUrl}`}\r\n                alt={`image of ${product.productId}`}/>\r\n            <div className=\"product-promotionBadge\">{product.promotionBadge}</div>\r\n            <div className=\"product-name\">{product.name}</div>\r\n            <span className=\"product-price\">{`${currencySymbol} ${product.price}`}</span>\r\n            <span className=\"product-priceWas\">{`${currencySymbol} ${product.priceWas}`}</span>\r\n            {\r\n                !product.available ?\r\n                    <div className=\"product-notAvailable\">OUT OF STOCK</div> :\r\n                    <>\r\n                        <div className=\"product-quantity\">{product.quantity} in stock</div>\r\n                        {\r\n                            product.lowOnStock && <div className=\"product-lowStock\">LOW ON STOCK</div>\r\n                        }\r\n                    </>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Product\r\n","import { useEffect, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport './App.css';\r\nimport Checkable from './components/Checkable';\r\nimport Product, { ProductDetails, convertFromRaw } from './components/Product'\r\n\r\nconst endpoint = 'https://run.mocky.io/v3/fca7ef93-8d86-4574-9a4a-3900d91a283e'\r\n\r\nfunction App() {\r\n\r\n  const [products, setProducts] = useState([] as ProductDetails[])\r\n  const [selectedProducts, setSelectedProducts] = useState([] as number[])\r\n  const [deletedProducts, setDeletedProducts] = useState([] as number[])\r\n\r\n  useEffect(() => {\r\n    fetch(endpoint)\r\n      .then(data => data.json())\r\n      .then(data => data.map(convertFromRaw))\r\n      .then(setProducts)\r\n  }, [])\r\n\r\n  function removeProducts() {\r\n    setDeletedProducts(deletedProducts.concat(selectedProducts));\r\n  }\r\n\r\n  function selectProduct(productId:number) {\r\n    return (isSelected:boolean) => {\r\n      if (isSelected && selectedProducts.indexOf(productId) === -1) {\r\n        setSelectedProducts(selectedProducts.concat(productId));\r\n      } else if (!isSelected) {\r\n        setSelectedProducts(selectedProducts.filter(selectedId => selectedId != productId));\r\n      }\r\n    }\r\n  }\r\n\r\n  function showAll() {\r\n    setDeletedProducts([]);\r\n    setSelectedProducts([]);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button variant=\"contained\" color=\"primary\" onClick={removeProducts}>Remove selected products</Button>\r\n      {\r\n        deletedProducts.length > 0 && <Button variant=\"contained\" color=\"secondary\" onClick={showAll}>Show all products</Button>\r\n      }\r\n      \r\n      <div className=\"App\">\r\n        {products.filter(product => deletedProducts.indexOf(product.productId) === -1).map(product =>\r\n          <Checkable key={product.productId} onCheck={selectProduct(product.productId)}>\r\n            <Product {...product} />\r\n          </Checkable>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}